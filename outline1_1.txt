#!/usr/bin/python3
# ---------------------------------------------------------e1.py
# CPS109, Tuesday, Sept. 8, 2020
# ------------------------------
#---------------------------------------------------------------
#   Chapter 1 notes
#---------------------------------------------------------------
#---------------------------------------------------------------
# 1. Discuss course outline
#
# 500
#---------------------------------------------------------------

#---------------------------------------------------------------
# 2. Chapter 1:
# Introduction to Computation and Programming Using Python, 2nd Edition
# by JV Guttag

# 1. Computer does just two basic things:

# 2. Fast and Lots

# 3. Course purpose: to get you comfortable with computational thinking

# 4. Two kinds of Knowledge:

#    Example of declarative knowledge:

# 5. Example of Imperative : Hero(n) of Alexandria -- square root
#                  g                                                x
#  ------------------------------------------------------------------
#  0  5    12.5    20                                              100
#    x/g         1. guess g
#                2. check g*g, stop if close enough
#                3. otherwise average g and x/g 
#                4. use average as the next g and go to 2.
#    
# 6. Example of doing square root

# Algorithm -- Example guess and check

# More formally,
# "An algorithm is a finite list of instructions that describe
#  a computation that when executed on a set of inputs will proceed through
#  a set of well-defined states and eventually produce an ouput."
#----------------------------------------------------
#!/usr/bin/python3
# ----------------------------------------------------------------e2.py
# 7. Short History of Early Computers

# 1833 Babbage designed programmable computer
# 1936 Turing Universal Computing Machine (stored program computer)
# 1938 US Navy electromechanical analog computer
# 1941 Atanasoff and Berry -- fixed program computer
# 1944 Colossus .. first electronic digital programmable computer

#https://www.computerhistory.org/timeline/computers/#169ebbe2ad45559efbc6eb35720d0b9f

# Programming Language

# 8. Church - Turing Thesis

# 9. Halting Program  Q(P, I)

# 10. Turing Completeness:

# 11. All modern PL's are TC

# 12. Many languages

# MATLAB
# C
# PHP
# Python

# 13. Programming language has

# Primitive constructs -->
# Syntax  -->
#      y = x++
# Static Semantics -->
#      Give example in Python
#      y = x / 3
#      y = b / 3

# Semantics

# Multiple meanings:
#   I cannot praise X too highly.

# Programming Language design --> 1

# Possible Errors

# Syntax
# Static Semantics
# Run time

# Possible results of run time error
# x
# x
# x

#!/usr/bin/python
# ------------------------------------------------------e3.py
# Chapter 2

# PL can be low-level   --
#        or high-level  --

# PL can be general --
#       or for application domain --

# PL can be interpreted --
#       or  compiled --

# Book and Course use Python but ...
#    not about ...
#    rather about ...
#

# 2.1 Basic elements of Python
#
# program -- sequence of definitions and commands

# Example command

# Example definition

# Python interpreter (also called shell)
#       evaluates the
#       executes the

# Start a shell and following along

# Example of print statement, 1 arg or 2

# Objects are what the program manipulates

# Objects can be:

# Scalar:
# (four kinds): 

# Nonscalar:

# literals represent objects in the program

# examples (scalar, nonscalar)

# Expression -- combination of ...

# Objects have types

# type() built in function

# expressions have value

# example a == b

# >>> shell prompt

# Operators for use on int

# i + j

# i - j

# i * j

# i // j

# i / j

# i % j

# i ** j

# comparison operators

# i == j

# i != j

# i > j

# i >= j

# i < j

# i <= j


# precedence ... as usual

# 3 + 4 ** 2

# primitive operators on bool

# a and b

# a or b

# not a

# Variables and assignment

# Example:

# pi = 3
# radius = 11
# area = pi * (radius ** 2)

# What happens when we reset radius:
# radius = 22

# Variable is just a name

# Assignment associates RHS with name on LHS
# The association is called "binding of the variable to the object"
# example

# Naming is important
# Example with diameter and area
a = 3.14
b = 11.2
c = a * (b * b)

# Variable names: with upper, lower, digit, _
# but not start with digit
# ----------------------------------------------------------------
# Reserved words, keywords,
# cannot be used as variable names
# --------------------------------
# and, as, assert, break,
# class, continue,
# def, del
# elif else except
# False finally for from
# global
# if import in is
# lambda
# None
# nonlocal not
# or
# pass
# raise return
# True
# try
# while with
# yield
