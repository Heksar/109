#!/usr/bin/python3
import unittest
# --------------------------------------------------------------e101
# Chapter 6 on testing
# --------------------------------------------------------------
# A glass box test suite is path-complete if it tests every path in the code
# Even path-complete test suites may not be sufficient to find all bugs
# ----------------------------------------------------------
def abs(n) :
    '''
    Assume: n is an int
    Returns n if n >= 0 and -n otherwise
    '''
    if n < -1 :
        return -n
    else :
        return n
# --------------------------------------------------------------
# The Testing  {2, -2} is path-complete
# --------------------------------------------------------------
class myTests(unittest.TestCase):
 def test1(self):
     self.assertEqual(abs(2), 2)
 def test2(self):
     self.assertEqual(abs(-2), 2)

if __name__ == '__main__':
 unittest.main(exit=True)


# --------------------------------------------------------------
# The End
# --------------------------------------------------------------
#!/usr/bin/python3
import random
# ---------------------------------------------------------e102-randint
# Chapter 6 on testing
# --------------------------------------------------------------
# Ideas to discuss briefly:

# unit testing:

# integration testing:

# Software Quality Assurance (SQA):

# test drivers:

# stub: simulates ...

# driver : simulates ...

# Regression testing: 
#
# ----------------------------------------------------------
# Random numbers and Simulation
# Note that random.randint(a, b) will give a pseudorandom number 
# from a to b, inclusive.
# Write a program that prints 1 roll of a die, then 2 rolls, then 3,
# and so on up to 20 rolls.  The output should look something like:
# 5
# 1 4
# 3 2 9
# and so on
# ----------------------------------------------------------
pass



# --------------------------------------------------------------
# The End
# --------------------------------------------------------------
#!/usr/bin/python3
import random
# --------------------------------------------------------------e103
# Chapter 6 on testing
# --------------------------------------------------------------
# Ideas to discuss briefly:

# Bug 1947

# no innocence

# Intermittent |             
#              |
#              |
#              |
#              |
#              |
#              |     2-dimensional bug space
#              |
#              |
#              |
#              |
#              |
#              |
#   Persistent |_______________________________________
#              Overt                               Covert
# <1> best
# <2> worse
# <3> worst
# <4> hardest
#
# Examples
# <1> defensive programming:
# <2> air traffic control software
# <3> mortgage bond software
# <4> radiation software
# ----------------------------------------------------------
# Random numbers and Simulation
# Write a program that does an experiment to find how many
# rolls of the die are required before the frequency of each
# number is within 0.01 of 1/6.
# Note: random.randrange(6) gives values from 0 to 5
# ----------------------------------------------------------
# Set up the condition for stopping
# ----------------------------------------------------------
def check(counts, epsilon) :
    '''
    Assume counts is a list of the counts for each possible value 
    on the die: 0 to 5
    Return True if each of the counts is within epsilon of 1/6; False otherwise
    '''
    pass
# ----------------------------------------------------------------------------
# Roll the dice while condition not met
# and count how many 0's, 1's, ..., 5's
# and count how many rolls it takes in all
# ----------------------------------------------------------------------------
pass

# ---------------------------------------------
print('The final array of counts of the various roll values:')
print('----------------------')
print(counts)
print('----------------------')
print('The number of rolls it took to get the count of each value')
print('very close to 1/6 of the total number of rolls:' )
print('----------------------')
print('n = ', n)
print('----------------------')
# --------------------------------------------------------------
# The End
# --------------------------------------------------------------
#!/usr/bin/python3
import random
import math
# --------------------------------------------------------------e104
# Chapter 6 on testing
# --------------------------------------------------------------
# Ideas to discuss briefly:
# Debugging tools:
# debuggers
# print statement
# Steps
# -------------
# 1. be systematic
# 2. do repeatable experiments
# 3. form hypotheses
# 4. predict
# 5  experiment
# 6. examine
# ----------------------------------------------------------
# Random numbers and Simulation
# ----------------------------------------------------------
# Buffon Needle Experiment:
# drop a one inch needle onto paper that
# is ruled with lines that are 2 inches apart.
# If the needle lands on a line, call that a hit.  Buffon conjectured that
# tries/hits would approximate pi
# Use the random number generator to run this experiment.
# Note: random.uniform(a, b) returns a random floating point number from
# a to b.
# ----------------------------------------------------------
# A random number from 0 to 2 represents the lower end, ylow
# A random number from 0 to 180 represents the angle, alpha
# The high end of the needle is yhigh = ylow + sin(alpha)
# a HIT is where yhigh is at least 2
# Do 10000 tries and get the result of tries/hits
# ----------------------------------------------------------
pass
# --------------------------------------------------------------
# The End
# --------------------------------------------------------------
#!/usr/bin/python3
import random
import math
# --------------------------------------------------------------e105
# Chapter 6 on testing
# --------------------------------------------------------------
# Ideas to discuss briefly:
# debugging = ...
# bisection: (1)   and (2)
# Approaches:
#   not why not but why is 
#   not where you think
#   explain
#   don't believe
#   write doc
#   walk
#   not quick fix
#   usual suspects:
#     order of args
#     spelling
#     initialization of variables
#     float == float
#     value equality not object equality
#     side effects
#     missing ()
#     alias
# ----------------------------------------------------------
#  Example of bisection search
# ----------------------------------------------------------

# ----------------------------------------------------------
# Checking for palindromic list
# ----------------------------------------------------------
def isPal(L) :
    '''
    Assumes L is a list
    Returns True if L is a palindrome, False otherwise
    '''
    temp = L
    temp.reverse
    if temp == L :
        return True
    else :
        return False
# --------------------------------------------------------------
# Getting elements of the list from the user
# --------------------------------------------------------------
def silly(n) :
    '''
    Assume n is an integer > 
    Gets n inputs from the user.
    Prints 'Yes' if the sequence of inputs is a palindrome
    'No' otherwise.
    '''
    for i in range(n) :
        result = []
        e = input('Enter element: ')
        result.append(e)
    if isPal(result) :
        print('Yes')
    else :
        print('No')
# --------------------------------------------------------------
silly(3)
# --------------------------------------------------------------
# The End
# --------------------------------------------------------------
#!/usr/bin/python3
import random
import math
# --------------------------------------------------------------e106
# Two-dimensional arrays
# --------------------------------------------------------------

# --------------------------------------------------------------
# Make a 2D matrix that looks like
# 5 9 2 3
# 1 4 7 8
# 1 2 1 2
# --------------------------------------------------------------
pass
matrix = 3 * [4*[0]]
print(matrix)

# ----------------------------------------------
# Show how to get the number of rows and number of columns
# ----------------------------------------------
rows = 0
cols = 0
print('---------------------')
pass

print('---------------------')
print('number of rows is', rows, 'and number of columns is', cols)
print('---------------------')
# ----------------------------------------------
# Is that always a good way to get the dimensions?
# ----------------------------------------------

# ----------------------------------------------
# Write a function to print the matrix
# ----------------------------------------------
def printmx(m) :
    print('--------------------')
    pass

    print('--------------------')
# ----------------------------------------------
# Print the matrix
# ----------------------------------------------
printmx(matrix)

# ----------------------------------------------------------
# --------------------------------------------------------------
# --------------------------------------------------------------
# The End
# --------------------------------------------------------------
#!/usr/bin/python3
import random
import math
# --------------------------------------------------------------e107
# Two-dimensional arrays
# --------------------------------------------------------------

# --------------------------------------------------------------
# Making a two-dimensional array filled with random numbers
# --------------------------------------------------------------
def makematrix(m, n, limit) :
    '''
    Returns a two-dimensional array of random integers
    from 0 to limit - 1, inclusive
    '''
    pass
# ----------------------------------------------------------
# Make a random 5x3 matrix with random integers from 0 to 50, inclusive
# --------------------------------------------------------------
pass

# ----------------------------------------------------------
# Show how the random seed works
# --------------------------------------------------------------
pass

# --------------------------------------------------------------
# The End
# --------------------------------------------------------------
