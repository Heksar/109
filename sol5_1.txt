# -------------------------------------------------------------
#    Solutions developed in the 2h class Tuesday Oct. 6, 2020
#              Exercises e59 to e66
# -------------------------------------------------------------
from math import pi
# ----------------------------------------------------------e59.py
# Chapter 4: Functions: areaOfCircle(r)   
# Loop until sentinel valule
# ------------------------------------------------------------
# Write a program that reads radii from the user until
# a radius of 0 is given.  Calculate the area of the circle
# for each non-zero radius, using the function areaOfCircle().
# -------------------------------------------------------------
# Talk about scope = name space, give weather example
# -----------------------------------------------------------------
weather = 'sunny'
print('weather = ', weather)
def areaOfCircle(radius) :
    global weather
    weather = 'rainy'
    #weather = 'rainy'
    print('weather = ', weather)
    #weather = 'rainy'
    return pi * radius ** 2

radius = float(input('radius = '))
while radius != 0 :
    print('weather = ', weather)
    a = areaOfCircle(radius)
    print('radius = ', radius, 'area = ', a)
    radius = float(input('radius = '))
#!/usr/bin/python3
# ----------------------------------------------------------e60.py
# Chapter 4: Functions: areaOfRectangle(width, height)   
# Two ways of formating the output
# ------------------------------------------------------------
# Write a program that defines the above function, and 
# then uses the function to print the areas for all
# the rectangles with widths 2, 4, 6, 8 and heights 1, 5, 7, 9
# The output should look like:
'''
width	height	area
2	1	2
2	3	6
2	5	10
2	7	14
2	9	18
4	1	4
4	3	12
4	5	20
4	7	28
4	9	36
6	1	6
6	3	18
6	5	30
6	7	42
6	9	54
8	1	8
8	3	24
8	5	40
8	7	56
8	9	72
'''
# -------------------------------------------------------------
def areaOfRectangle(width, height) :
    return width * height

#print('width\theight\tarea')
print('%-14s%-14s%-14s'      %     ('width', 'height', 'area'))
print('---------------------------')
for width in range(2, 10, 2) :
    for height in range(1, 10, 2) :
        area = areaOfRectangle(width, height)
        #print(str(width) + '\t' + str(height) + '\t' + str(area))
        print("%-14d%-14d%-14d%14.2f"    %    (width, height, area, 3.14159))

# -----------------------------------------------------------------
#!/usr/bin/python3
# ----------------------------------------------------------e61.py
# Chapter 4.2: Functions: 
# ------------------------------------------------------------
# Write a function stars() that prints the following pattern.
# *****
# ****
# ***
# **
# *
# Write a program that uses that function several times.
# -------------------------------------------------------------
def stars() :
    for i in range(5, 0, -1) :
        print(i * '*')
# -----------------------------------------------------------------
stars()
stars()
stars()
#!/usr/bin/python3
# ----------------------------------------------------------e62.py
# Chapter 4.2: Functions: return statement
# ------------------------------------------------------------
# Write a function stars() that returns the following pattern.
# *****
# ****
# ***
# **
# *
# Write a program that uses that function several times.
# -------------------------------------------------------------
def stars() :
    result = ''
    for i in range(5, 0, -1) :
        if i == 1 :
            result += '*'
        else :
            result +=  i * '*' + '\n'
    return result
# -----------------------------------------------------------------
print(stars())
print(stars())
print(stars())
# -----------------------------------------------------------------
#!/usr/bin/python3
# ----------------------------------------------------------e63.py
# Chapter 4.2: Functions: parameter, argument
# ------------------------------------------------------------
# Write a function stars(n) that prints the following pattern.
# **********   n stars
# *********    n-1 stars
# ...          and so on, down to 1 star
# ***
# **
# *
# Write a program that uses that function several times.
# -------------------------------------------------------------
# As an introduction to recursion, do this recursively
# -------------------------------------------------------------
def stars(n) :
    for i in range(n, 0, -1) :
        print(i * '*')
def recstars(n) :
    # base case
    if n <= 0 :
        return 
    #general case
    print(n * '*')
    recstars(n - 1)
# -----------------------------------------------------------------
stars(0)
recstars(0)
stars(3)
stars(5)
stars(10)
recstars(3)
recstars(20)
# -----------------------------------------------------------------
#!/usr/bin/python3
# ----------------------------------------------------------e64.py
# Chapter 4.2: Functions: parameter, parameter
# ------------------------------------------------------------
# Write a function stars(n, up) that prints the following pattern
# if up is False:
# **********   n stars
# *********    n-1 stars
# ...          and so on, down to 1 star
# ***
# **
# *
# and the reverse pattern if up is True:
# *
# **
# ***
# ...          and so on, increasing by one each line, 
# *********    n-1 stars
# **********   n stars
#
# Write a program that uses that function several times.
# -------------------------------------------------------------

# -----------------------------------------------------------------
#!/usr/bin/python3
# ----------------------------------------------------------e65.py
# Chapter 4.2: Functions: fibonacci
# talk about recursion
# ------------------------------------------------------------
# Write a function fib(n) that returns the nth Fibonacci number
# Recall the sequence: 1, 1, 2, 3, 5, 8, 13, ...
# Assume that fib(n) is None for n <= 0
# and fib(1) = 1, fib(2) = 1, 
# and fib(n) = fib(n-1) + fib(n-2) for n > 2
# ----------------------------------------------------
# Write a program that prints fib(0), fib(1), fib(2), ...., fib(10)
# -------------------------------------------------------------
# recursive definition
countfib5 = 0
def fib(n) :
    global countfib5
    if n == 5 :
        countfib5 += 1
    # base case
    if n <= 0 :
        return None
    if n <= 2 :
        return 1
    # general case
    return fib(n -1) + fib(n - 2)

# iterative definition
def fibit(n) : 
    if n <= 0 :
        return None
    a, b = 1, 1
    for i in range(2, n, 1) :
        a, b = b, a + b
    return b

# -----------------------------------------------------------------
for i in range(11) :
    print(fib(i), end = ' ')
print()
print('----------------')
for i in range(11) :
    print(fibit(i), end = ' ')
print()
print('----------------')
countfib5 = 0
n = 30
print('fibit()', n, fibit(n))
print('fib()', n, fib(n))
print('countfib5 = ', countfib5)
#!/usr/bin/python3
# ----------------------------------------------------------e66.py
# Chapter 4.2: Functions: mean of a list of numbers
# ------------------------------------------------------------
# Write a function mean(xs) that returns the average of a list of numbers.
# ----------------------------------------------------
# Write a program to try it out.
# mention specification
# -------------------------------------------------------------
def mean(xs) :
    '''
    xs is a list of floats
    returns the average of the list
    '''
    return sum(xs) / len(xs)

# -----------------------------------------------------------------
numbers = [2, 4, 8, 10]
print('---------------------')
print('The mean of ', numbers, 'is', mean(numbers), 'expecting', 6)
print('---------------------')
