#!/usr/bin/python3
# ----------------------------------------------------------e22.py
# 2.4 Example: read 10 integers and print largest odd or message
# ----------------------------------------------finger exercise p. 24
# Ask the user for 10 integers, and
# Use 10 random integers from 0 to 20, inclusive
# print the largest odd number entered.
# If no odd number, then print message to that effect
# Mention: short-circuit evaluation
# ----------------------------------------------------------
import random
i  = 0
largestodd = None
while i < 10 :
    n = random.randint(0, 20)
    print(n, end = '  ' )
    if n % 2 == 1 :
        if largestodd == None or n > largestodd :
            largestodd = n
    i = i + 1
print()
print('Largest odd is : ', largestodd)
#!/usr/bin/python3
# ----------------------------------------------------------e23.py
# 3.1 Exhaustive Enumeration  (another Guess and Check algorithm)
# Find the integer cube root of a number
# ----------------------------------------------Finding cube root
# Ask the user for any integer, n, (could be negative)
# try the numbers m = 0, 1, 2, ...
# until m**3 is no longer less than the absolute value of n 
# check what you have when you leave the loop
# ----------------------------------------------------------
#n = int(input('n = '))
#n = 1957816251
n = 7406961012236344616
guess = 0
# decrementing function is       
while guess ** 3 < abs(n) :
    guess = guess + 1

if guess ** 3 == abs(n) :
    if n < 0 :
        guess = - guess
    print('cube root of', n, ' is ', guess)
else :
    print(n, 'is not a perfect cube')
#!/usr/bin/python3
# ----------------------------------------------------------e23.py
# 3.1 Decrementing function for cube root program
# Argue that the program will always terminate
# no matter what the input:
# In the loop,
# 1. 
# 2. 
# 3. 
# -----------------------------------------------------------
#   decrementing function, p. 26 Guttag
# -----------------------------------------------------------
# To prove that a loop terminates, construct a decrementing function
# -------------------------------------------------------------------
# A decrementing function has the following four properties:
# ------------------------------------------------------------
# 1. It maps some program variables into an integer.
# 2. It starts out > 0 (when the loop is entered)
# 3. When it's value is <= 0, the loop terminates
# 4. Its value decreases every time through the loop.
# ----------------------------------------------------------
# What is a decrementing function for the cube root program?
# -------------------------------------------------------------

# -----------------------------------------------------------
# Re-write the cube root program again, forgetting the line
# m = m + 1
# -------------------------------------------------------------------
# see that it never terminates ... press Control-C or
# use the Stop Program button on your IDE
# ------------------------------------------------------------
# To help find the problem, 
# print the decrementing function in the loop to see if it is decreasing.
# ------------------------------------------------------------

#!/usr/bin/python3
# ----------------------------------------------------------e25.py
# Exhaustive enumeration
# -------------------------------------------------------- p. 26-27 Guttag
# Exhaustive enumeration is a variant of Guess and Check
# -- just try all the possibilities
# Seems stupid, but
# 1. often very effective, and
# 2. easy to understand
# 3. easy to implement
# -------------------------------------------------------------------
# Try e22.py on
# 1957816251
# 7406961012236344616
# ------------------------------------------------------------p. 27
# Modern computers are amazingly fast
# one instruction per nanosecond
# the time for light to travel a foot
# -------------------------------------------------
#!/usr/bin/python3
# ----------------------------------------------------------e26.py
# Showing the computer can count quickly
# ------------------------------------------------------------
# Write the following program:
# ------------------------------------------------------------
# Ask the user for a big integer N
# A loop that counts up to N
# Print N
# -----------------------------------------------
# See how big N has to be before you notice a pause
# -----------------------------------------------
N = int(input("N, a big positive integer: "))
m = 0
while m < N :
    m = m + 1
print('Done counting to', m)
# -----------------------------------------------
# What is the decrementing function F for this loop?
# Recall:
# 1. F(m, n) is an integer and is nonnegative when loop is entered
# 2. When F(m, n) is <= 0 the loop terminates
# 3. F(m, n) decreases by 1 each iteration
# --------------------------------------------------
# F(m, n) = N - m
# --------------------------------------------------
#!/usr/bin/python3
# ----------------------------------------------------------e27.py
# Finger exercise, p.27
# ------------------------------------------------------------
# Write a program that asks the user for an integer and prints
# two integers, root and power, such that 1 < power < 6
# and root ** power is equal to the integer entered by the user.
# If no such pair of integers exists, it should print a message
# to that effect.
# (Try 115856201)
# ------------------------------------------------------------
n =  int(input('n = '))
# find root and power so that root ** power == n
power = 2
found = False
while power < 6 :
    root = 0
    while root ** power < n :
        root = root + 1
    if root ** power == n :
        print(root, '**', power, ' is ', n)
        found = True
    power = power + 1
if not found :
    print(n, 'is not a root to some power in the range 2 to 5')
#!/usr/bin/python3
# ----------------------------------------------------------e28.py
# 3.2 For Loops
# ------------------------------------------------------------
# Most of the while loops that we wrote 
# were controlled by an increasing integer sequence, like
i = 0
while i < 5 :
    print(i)
    i = i + 1
# This is so common that Python has a special loop to do that
for i in range(5) :
    print(i)
# The for loop has the structure:
# for variable in sequence :
#    code block
# ----------------------------------------------------------
# the sequence is usually generated by the range function
# range(start, stop, step)
# where start defaults to 0
# and step defaults to 1
# Try out range with some examples:
# range(7), range(1, 7), range(0, 7, 2), range(10, 0, -1)
# -----------------------------------------------------------------
print('-------------------------')
for i in range(1, 7) :
    print(i)
print('-------------------------')
for blue in range(1, 7, 3) :
    red = 5
    print(blue)
print('red = ', red)
print('-------------------------')
for i in range(10, 0, -1) :
    print('i = ', i)
print('-------------------------')
print('An empty range')
for i in range(10, 0, 1) :
    print('i = ', i)
print('-------------------------')
#!/usr/bin/python3
# ----------------------------------------------------------e29.py
# 3.2 For Loops
# ------------------------------------------------------------
# Write some simple printing for loops using range
# ------------------------------------------------------------
# Write some simple printing for loops using an explicit sequence
# Note that [5, 3, 1] is a literal list
# ------------------------------------------------
# Note that range is 'lazy' to save space
# ----------------------------------------------------------
a = [ 5, 3, 1, 9]
for number in a :
    print('number = ', number)
print('----------')

#!/usr/bin/python3
# ----------------------------------------------------------e30.py
# 3.2 For Loops : note about range and literal list
# ------------------------------------------------------------
# Note: the arguments to the range function are evaluated just once
# on entering the loop
# Explain results of
n = 10
for i in range(n) :
    print(i, 'n =', n)
    n = 5
# ------------------------------------------------------------
# Write some simple printing for loops using an explicit sequence
# Note that [5, 3, 1] is a literal list
# ------------------------------------------------
# Note that range is 'lazy' to save space
# In the following, a huge list is not created by range()
# ----------------------------------------------------------
for i in range(1000000000) :
    print('i = ', i)
    if i > 5:
        break
