#----------------------------------------------------------
#    Outline for lectures 9 and 10 in week 5
#----------------------------------------------------------
# ----------------------------------------------------------e59.py
# Chapter 4: Functions: areaOfCircle(r)   
# Loop until sentinel valule
# ------------------------------------------------------------
# Write a program that reads radii from the user until
# a radius of 0 is given.  Calculate the area of the circle
# for each non-zero radius, using the function areaOfCircle().
# -------------------------------------------------------------
# ----------------------------------------------------------e60.py
# Chapter 4: Functions: areaOfRectangle(width, height)   
# Two ways of formating the output
# ------------------------------------------------------------
# Write a program that defines the above function, and 
# then uses the function to print the areas for all
# the rectangles with widths 2, 4, 6, 8 and heights 1, 5, 7, 9
# The output should look like:
#
#width	height	area
#2	1	2
#2	3	6
# ----------------------------------------------------------e61.py
# Chapter 4.2: Functions:
# Play with functions -- print a pattern
# ------------------------------------------------------------
# Write a function stars() that prints the following pattern.
# *****
# ****
# ***
# **
# *
# Write a program that uses that function several times.
# -------------------------------------------------------------
# -----------------------------------------------------------------

# ----------------------------------------------------------e62.py
# Chapter 4.2: Functions: return statement
# Play with functions -- return a pattern
# ------------------------------------------------------------
# Write a function stars() that returns the following pattern.
# *****
# ****
# ***
# **
# *
# Write a program that uses that function several times.
# -------------------------------------------------------------
# -----------------------------------------------------------------

# ----------------------------------------------------------e63.py
# Chapter 4.2: Functions: parameter, argument
# Play with functions -- parameter describing pattern
# ------------------------------------------------------------
# Write a function stars(n) that prints the following pattern.
# **********   n stars
# *********    n-1 stars
# ...          and so on, down to 1 star
# ***
# **
# *
# Write a program that uses that function several times.
# -------------------------------------------------------------

# -----------------------------------------------------------------

# ----------------------------------------------------------e64.py
# Chapter 4.2: Functions: parameter, parameter
# Play with functions -- parameters describing pattern
# ------------------------------------------------------------
# Write a function stars(n, up) that prints the following pattern
# if up is False:
# **********   n stars
# *********    n-1 stars
# ...          and so on, down to 1 star
# ***
# **
# *
# and the reverse pattern if up is True:
# *
# **
# ***
# ...          and so on, increasing by one each line, 
# *********    n-1 stars
# **********   n stars
#
# Write a program that uses that function several times.
# -------------------------------------------------------------

# -----------------------------------------------------------------

# ----------------------------------------------------------e65.py
# Chapter 4.2: Functions: fibonacci
# Play with functions -- fibonacci
# ------------------------------------------------------------
# Write a function fib(n) that returns the nth Fibonacci number
# Recall the sequence: 1, 1, 2, 3, 5, 8, 13, ...
# Assume that fib(n) is None for n <= 0
# and fib(1) = 1, fib(2) = 1, 
# and fib(n) = fib(n-1) + fib(n-2) for n > 2
# ----------------------------------------------------
# Write a program that prints fib(0), fib(1), fib(2), ...., fib(10)
# -------------------------------------------------------------


# -----------------------------------------------------------------

# ----------------------------------------------------------e66.py
# Chapter 4.2: Functions: mean of a list of numbers
# Play with functions -- the mean of a list
# ------------------------------------------------------------
# Write a function mean(xs) that returns the average of a list of numbers.
# ----------------------------------------------------
# Write a program to try it out.
# -------------------------------------------------------------


# -----------------------------------------------------------------
numbers = [2, 4, 8, 10]
print('---------------------')
print('The mean of ', numbers, 'is', mean(numbers))
print('---------------------')

# ----------------------------------------------------------e67.py
# Chapter 4.2: Functions: perfect square, exhaustive enumeration
# Play with functions --boolean return
# ------------------------------------------------------------
# Write a function perfectsquare(n) that returns True if
# n is a perfect square, and False otherwise.
# Use exhaustive enumeration to answer the question.
# ----------------------------------------------------
# Write a program to try it out.
# -------------------------------------------------------------

# -----------------------------------------------------------------
# Try the function on the following numbers
numbers = [2, 4, 8, 10, 25, 49, 50, 100]

# ----------------------------------------------------------e68.py
# Chapter 4.2: Functions: square root, Heron method
# Play with function: Hero's algorithm
# ------------------------------------------------------------
# Write a function squareroot(x, epsilon) that returns y  
# such that y ** 2 is within epsilon of x.
# Use the Heron or Newton method, where a guess is improved to
# (guess + x/guess) / 2
# ----------------------------------------------------
# Write a program to try it out.
# -------------------------------------------------------------


# -----------------------------------------------------------------
# Try the function on the following numbers
numbers = [2, 4, 8, 10, 25, 49, 50, 100, 0, 0.5]
print('x\troot\tsquared')



print('--------------')

# ----------------------------------------------------------e69.py
# Chapter 4.2: Functions: exp(x)
# Play with function: approximation of e^x
# ------------------------------------------------------------
# Write a function exp(x, epsilon) that computes e ^ x
# by the sum of the power series (for n from 0 to infinity) of 
# x ** n / n!
# Do the series until a term is less than epsilon.
# Note that each term is a product of the previous term with (x / n)
# ----------------------------------------------------
# Write a program to try it out.
# -------------------------------------------------------------


# -----------------------------------------------------------------
# Try the function on the following numbers
numbers = [0, 1, 1.5, 2, 5, 0.5]
print('x\te^x')
print('-------------------')


print('--------------')

import math
# ----------------------------------------------------------e70.py
# Chapter 4.2: Functions: meanSD(xs)     math.sqrt()
# Function that returns a list
# ------------------------------------------------------------
# Write a function meanSD(xs) that computes the mean and the
# standard deviation of a list of n numbers
# The mean is the sum / n
# The standard deviation is sqrt(sum[(x - mean)**2] / (n - 1))
# The function returns [the mean, standard deviation]
# ----------------------------------------------------
# Write a program to try it out.
# -------------------------------------------------------------


# -----------------------------------------------------------------
# Try the function on the following numbers
numbers = [0, 1, 1.5, 2, 5, 0.5]

print('-------------------')

# ----------------------------------------------------------e71.py
# Chapter 4.2: Functions: recursion   factorial
# ------------------------------------------------------------
# Write a function facR(n) that computes n! = n(n-1)!
# compare with facI(n), the iterative approach
# ----------------------------------------------------
# Write a program to try it out.
# -------------------------------------------------------------


# -----------------------------------------------------------------
# Try the function on the following numbers
numbers = [0, 1, 2, 5, 10]

print('-------------------')
